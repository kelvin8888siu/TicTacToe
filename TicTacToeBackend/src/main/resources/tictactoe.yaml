openapi: 3.0.0
info:
  title: Simple TicTacToe API
  description: TicTacToe API
  contact:
    email: siu.ka@northeastern.edu
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0-oas3
servers:
- url: https://virtserver.swaggerhub.com/northeasternSwagger/Inventory/1.0.0
  description: SwaggerHub API Auto Mocking
- url: https://localhost:8080/
tags:
- name: player
- name: game
- name: move
paths:
  /player:
    post:
      tags:
        - player
      summary: Creates a player
      description: Player or user creation
      operationId: createPlayer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Player'
      responses:
        201:
          description: Player Successfully Added
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: The Player ID.
                  username:
                    type: string
                    description: The user name.
        400:
          description: Bad Request
  /game:
    post:
      tags:
        - game
      summary: Creates a new game
      description: New game creation
      operationId: createGame
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Game'
      responses:
        201:
          description: Game Successfully Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        400:
          description: Bad Request
  /move:
    post:
      tags:
        - move
      summary: Creates a new move in a game
      description: New move creation
      operationId: createMove
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Move'
      responses:
        201:
          description: Move Successfully Added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Move'
        400:
          description: Bad Request
  /player/{username}:
    get:
      tags:
        - player
      summary: Searches for id of player based on username
      operationId: searchIdOfPlayer
      description: Id of player will be read
      parameters:
        - name: username
          in: path
          description: Username of player
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        400:
          description: Invalid ID supplied
        404:
          description: Username not found
  /game/{player_one_id}:
    get:
      tags:
        - game
      summary: Searches for all existing games based on a player
      operationId: searchAllGamesOfPlayer
      description: All existing games by a player will be read
      parameters:
        - name: player_one_id
          in: path
          description: ID of player
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successful Operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        400:
          description: Invalid ID supplied
        404:
          description: Games not found
  /move/{game_id}:
    get:
      tags:
        - move
      summary: Searches for all moves for a particular game
      operationId: searchAllMovesOfGame
      description: All moves of a specific game is read
      parameters:
        - name: game_id
          in: path
          description: ID of game
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Move'
        400:
          description: Invalid ID supplied
        404:
          description: Moves not found
  /game/{id}:
    delete:
      tags:
        - game
      summary: Delete a game for a player
      description: Delete a game
      operationId: deleteGame
      parameters:
        - name: id
          in: path
          description: id of the game
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        400:
          description: Invalid ID supplied
        404:
          description: Game not found
components:
  schemas:
    Player:
      type: object
      required:
        - username
        - password
      properties:
        id:
          type: integer
          example: 12345
          minimum: 0
        username:
          type: string
          example: 'kelvin97siu'
        password:
          type: string
          example: '1234GG3'
    Game:
      type: object
      required:
        - player_one_id
        - player_one_piece
        - player_two_id
        - game_size
        - game_status
      properties:
        id:
          type: integer
          example: 12345
          minimum: 0
        player_one_id:
          type: integer
          example: 12345
          minimum: 0
        player_one_piece:
          type: string
          enum: [X, O]
        player_two_id:
          type: integer
          example: 5
          minimum: 0
        game_size:
          type: integer
          example: 3
          minimum: 3
        game_status:
          type: string
          enum: [IN_PROGRESS, WIN, LOSS]
    Move:
      type: object
      required:
        - player_id
        - game_id
        - board_row
        - board_column
        - time_of_move
      properties:
        id:
          type: integer
          example: 12345
          minimum: 0
        player_id:
          type: integer
          example: 12345
          minimum: 0
        game_id:
          type: integer
          example: 12345
          minimum: 0
        board_row:
          type: integer
          example: 3
          minimum: 3
        board_columnn:
          type: integer
          example: 3
          minimum: 3
        time_of_move:
          type: string