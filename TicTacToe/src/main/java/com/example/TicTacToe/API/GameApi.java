/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.TicTacToe.API;

import com.example.TicTacToe.Model.Game;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;
import java.util.ArrayList;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-03-07T15:12:03.616186-05:00[America/Toronto]")

@Validated
@Api(value = "game", description = "the game API")
public interface GameApi {

    default GameApiDelegate getDelegate() {
        return new GameApiDelegate() {};
    }

    /**
     * POST /game : Creates a new game
     * New game creation
     *
     * @param game  (required)
     * @return Game Successfully Created (status code 201)
     */
    @ApiOperation(value = "Creates a new game", nickname = "createGame", notes = "New game creation", tags={ "game", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Game Successfully Created") })
    @RequestMapping(value = "/game",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> createGame(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Game game) {
        return getDelegate().createGame(game);
    }


    /**
     * DELETE /game/{id} : Delete a game for a player
     * Delete a game
     *
     * @param id id of the game (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Game not found (status code 404)
     */
    @ApiOperation(value = "Delete a game for a player", nickname = "deleteGame", notes = "Delete a game", response = Game.class, tags={ "game", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = Game.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Game not found") })
    @RequestMapping(value = "/game/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Game> deleteGame(@ApiParam(value = "id of the game",required=true) @PathVariable("id") Integer id) {
        return getDelegate().deleteGame(id);
    }


    /**
     * GET /game/{player_one_id} : Searches for all existing games based on a player
     * All existing games by a player will be read
     *
     * @param playerOneId ID of player (required)
     * @return Successful Operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Games not found (status code 404)
     */
    @ApiOperation(value = "Searches for all existing games based on a player", nickname = "searchAllGamesOfPlayer", notes = "All existing games by a player will be read", response = Game.class, tags={ "game", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation", response = Game.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Games not found") })
    @RequestMapping(value = "/game/{player_one_id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ArrayList<Game>> searchAllGamesOfPlayer(@ApiParam(value = "ID of player",required=true) @PathVariable("player_one_id") Integer playerOneId) {
        return getDelegate().searchAllGamesOfPlayer(playerOneId);
    }

}
