/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.3).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.TicTacToe.API;

import com.example.TicTacToe.Model.Move;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-03-07T15:12:03.616186-05:00[America/Toronto]")

@Validated
@Api(value = "move", description = "the move API")
public interface MoveApi {

    default MoveApiDelegate getDelegate() {
        return new MoveApiDelegate() {};
    }

    /**
     * POST /move : Creates a new move in a game
     * New move creation
     *
     * @param move  (required)
     * @return Move Successfully Added (status code 201)
     */
    @ApiOperation(value = "Creates a new move in a game", nickname = "createMove", notes = "New move creation", tags={ "move", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Move Successfully Added") })
    @RequestMapping(value = "/move",
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Void> createMove(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Move move) {
        return getDelegate().createMove(move);
    }


    /**
     * GET /move/{game_id} : Searches for all moves for a particular game
     * All moves of a specific game is read
     *
     * @param gameId ID of game (required)
     * @return Successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Moves not found (status code 404)
     */
    @ApiOperation(value = "Searches for all moves for a particular game", nickname = "searchAllMovesOfGame", notes = "All moves of a specific game is read", response = Move.class, tags={ "move", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful operation", response = Move.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "Moves not found") })
    @RequestMapping(value = "/move/{game_id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<ArrayList<Move>> searchAllMovesOfGame(@ApiParam(value = "ID of game",required=true) @PathVariable("game_id") Integer gameId) {
        return getDelegate().searchAllMovesOfGame(gameId);
    }

}
